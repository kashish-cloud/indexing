name: Build Packer on Push

on:
  push:
    branches:
      - main

jobs:
  build-packer:
    runs-on: ubuntu-latest

    steps:
      - name: Echo Message
        run: echo "Push event detected on the main branch."

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true
          universe: googleapis.com
          cleanup_credentials: true
          access_token_lifetime: 3600s
          access_token_scopes: https://www.googleapis.com/auth/cloud-platform
          id_token_include_email: false

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: "latest"
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Install modules
        run: npm install

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Packer init
        run: packer init ami.pkr.hcl

      - name: Build Artifact
        run: zip -r indexing.zip . -x ".git*" -x ".github*"

      - name: Publish Web App Artifact
        uses: actions/upload-artifact@v2
        with:
          name: indexing
          path: indexing.zip

      - name: check path
        run: |
          pwd
          ls /home/runner/work/indexing/indexing

      - name: Build Image on GCP
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          IMAGE_FAMILY: "centos-stream-8"
          IMAGE_PROJECT: "centos-cloud"
          CUSTOM_IMAGE_FAMILY: "csye6225-custom-image-family"
          CUSTOM_IMAGE_NAME: "csye6225-custom-image"
          MACHINE_TYPE: "n1-standard-2"
          DISK_SIZE: "100"
          ZONE: "us-east1-b"
        run: |
          packer build -var "project_id=${PROJECT_ID}" -var "image_family=${IMAGE_FAMILY}" -var "image_project=${IMAGE_PROJECT}" \
                       -var "custom_image_family=${CUSTOM_IMAGE_FAMILY}" -var "custom_image_name=${CUSTOM_IMAGE_NAME}" \
                       -var "machine_type=${MACHINE_TYPE}" -var "disk_size=${DISK_SIZE}" -var "zone=${ZONE}" \
                       ami.pkr.hcl

      - name: Extract Image ID from manifest
        run: |
          IMAGE_ID=$(jq -r '.builds[-1].artifact_id' manifest.json)
          echo "Image ID: $IMAGE_ID"
          echo "IMAGE_ID=${IMAGE_ID}" >> $GITHUB_ENV

      - name: Create new Instance Template version
        id: create_template
        run: |
          gcloud compute instance-templates create-version "webapp-template" \
            --source-instance-template="webapp-template" \
            --name="webapp-template-v2"

      - name: Configure managed instance group
        run: |
          gcloud compute instance-groups managed set-instance-template "my-instance-group-manager" \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --template="webapp-template-v2" \
            --region="us-east1"

      - name: Start rolling update
        run: |
          gcloud compute instance-groups managed rolling-action start-update "my-instance-group-manager" \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --version="webapp-template-v2" \
            --region="us-east1" \
            --max-unavailable=0

      - name: Wait for refresh
        run: |
          echo "Waiting for managed instance group refresh to complete..."
          # Set initial wait time to 0
          WAIT_TIME=0
          # Loop until refresh is complete or timeout reached
          while true; do
            # Check if the refresh is complete
            STATUS=$(gcloud compute instance-groups managed describe "my-instance-group-manager" --region="us-east1" --format="value(currentActions)")
            if [[ "$STATUS" == "[]" ]]; then
              echo "Managed instance group refresh complete."
              break
            fi
            # Increment wait time and sleep for a while before checking again
            WAIT_TIME=$((WAIT_TIME + 10))
            if [ $WAIT_TIME -ge 600 ]; then
              echo "Timeout reached while waiting for managed instance group refresh."
              exit 1
            fi
            echo "Waiting for refresh to complete..."
            sleep 10
          done
